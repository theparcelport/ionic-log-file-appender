{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ionic-log-file-appender/log.service.ts","ng://ionic-log-file-appender/log-file-appender.module.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","length","push","__values","o","s","m","i","LogProvider","file","platform","datePipe","defaultConfig","LogProviderConfig","enableMetaLogging","logToConsole","logDateFormat","fileDateFormat","fileMaxLines","fileMaxSize","totalLogSize","baseDir","logDir","logPrefix","devMode","config","prototype","init","configuration","_this","ready","merge","dataDirectory","debug_metaLog","JSON","stringify","fileLoggerReady","log","is","checkDir","initLogFile","catch","err","createLogDir","url","initFailed","isReady","createDir","listDir","entries","cleanupFiles","cleanupCompleted","Object","getOwnPropertyNames","_.filter","entry","isFile","name","startsWith","_.orderBy","total","calculated","sizeTotal","entries_1","tslib_1.__values","entries_1_1","getFileSize","size","_b","maxSizeExceeded","lastEntry","failure_1","getMetadata","metadata","failure","lastEntrySize","removeFile","shift","error","currentFile","fullPath","createNextFile","path","replace","logInternal","message","date","Date","logMessage","transform","console","queue","processing","doProcess","logDev","processQueue","checkFileLength","writeFile","append","lines","createLogFileName","dateString","fileName","createFile","newFile","getLogFiles","Injectable","File","Platform","DatePipe","fields","k","LogFileAppenderModule","forRoot","ngModule","providers","forChild","NgModule","args","imports","CommonModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {DatePipe} from '@angular/common';\r\nimport {Entry, File} from '@ionic-native/file';\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from 'ionic-angular';\r\nimport * as _ from 'lodash'\r\nimport {ILogProviderConfig} from './config';\r\n\r\n/**\r\n * SmartMove Ionic rolling log file appender\r\n * CellTrack Systems Pty Ltd 2018\r\n */\r\n@Injectable()\r\nexport class LogProvider {\r\n\r\n    private fileLoggerReady = false;\r\n    private initFailed = false;\r\n    private currentFile: Entry;\r\n    private lines: 0;\r\n    private queue: string[] = [];\r\n    private processing = false;\r\n\r\n    private readonly defaultConfig: LogProviderConfig;\r\n\r\n    private config: LogProviderConfig;\r\n\r\n    constructor(private file: File,\r\n                private platform: Platform,\r\n                private datePipe: DatePipe) {\r\n        this.defaultConfig = new LogProviderConfig({\r\n            enableMetaLogging: false,\r\n            logToConsole: false,\r\n            logDateFormat: 'yyyy-MM-dd HH:mm:ss.SSS',\r\n            fileDateFormat: 'yyyy-MM-dd_HH-mm-ss-SSS',\r\n            fileMaxLines: 2000,\r\n            fileMaxSize: 1000000,\r\n            totalLogSize: 5000000,\r\n            baseDir: null,\r\n            logDir: 'logs',\r\n            logPrefix: 'log',\r\n            devMode: false\r\n        });\r\n        this.config = this.defaultConfig;\r\n    }\r\n\r\n    /**\r\n     * Initializes the file logger\r\n     */\r\n    init(configuration: ILogProviderConfig): Promise<any> {\r\n        return this.platform.ready()\r\n            .then(() => {\r\n                this.config = new LogProviderConfig(configuration);\r\n                // Any configuration not specified will take the defaults\r\n                this.config.merge(this.defaultConfig);\r\n                if (!this.config.baseDir) {\r\n                    // Can only initialise this after platform is ready\r\n                    this.config.baseDir = this.file.dataDirectory;\r\n                }\r\n                this.debug_metaLog('LogProvider initialised with configuration: ' + JSON.stringify(this.config));\r\n                this.fileLoggerReady = false;\r\n                this.debug_metaLog('Initialising file logger');\r\n                this.log('Initialising file logger');\r\n                if (!this.platform.is('cordova'))\r\n                {\r\n                    this.debug_metaLog('Not initialising file logger as the it is not supported by the platform ' + this.platform.url());\r\n                    this.initFailed = true;\r\n                    return Promise.resolve();\r\n                }\r\n                this.debug_metaLog('Data directory: ' + this.config.baseDir);\r\n                return this.file.checkDir(this.config.baseDir, this.config.logDir)\r\n                    .then(() => {\r\n                        this.debug_metaLog('Found logging directory');\r\n                        return this.initLogFile();\r\n                    })\r\n                    .catch(err => {\r\n                        this.debug_metaLog('Could not find logging directory: ' + JSON.stringify(err));\r\n                        return this.createLogDir();\r\n                    });\r\n        });\r\n    }\r\n\r\n    isReady(): boolean {\r\n      return this.fileLoggerReady;\r\n    }\r\n\r\n    /**\r\n     * Attempts to create the logging directory\r\n     */\r\n    private createLogDir(): Promise<any> {\r\n        this.debug_metaLog('Attempting to create logging directory');\r\n        return this.file.createDir(this.config.baseDir, this.config.logDir, false)\r\n            .then(() => {\r\n                this.debug_metaLog('Successfully created logging directory');\r\n                return this.initLogFile();\r\n            })\r\n            .catch(err => {\r\n                this.initFailed = true;\r\n                this.debug_metaLog('Failed to create logging directory: ' + JSON.stringify(err));\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Attempts to initialise the current log file\r\n     * @returns a promise upon completion or failure\r\n     */\r\n    private initLogFile(): Promise<any> {\r\n        this.debug_metaLog('Attempting to initialise log file');\r\n        return this.file.listDir(this.config.baseDir, this.config.logDir)\r\n            .then((entries: Entry[]) => {\r\n                if (entries && entries.length > 0) {\r\n                    this.debug_metaLog(entries.length + ' existing log files found.');\r\n                    return this.cleanupFiles(entries);\r\n                } else {\r\n                    this.debug_metaLog('No existing log files found.');\r\n                    return this.cleanupCompleted(null, 0, null);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.debug_metaLog('Failed to get file list: ' + JSON.stringify(err, Object.getOwnPropertyNames(err)));\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks the total size of log files against the configured maximum size and deletes oldest if necessary\r\n     * @param entries the files found in the logging directory\r\n     */\r\n    private async cleanupFiles(entries: Entry[]): Promise<any> {\r\n        this.debug_metaLog('Starting cleanup of ' + entries.length + ' log files');\r\n        entries = _.filter(entries, (entry: Entry) => entry.isFile && entry.name && entry.name.startsWith(this.config.logPrefix));\r\n        if (entries.length === 0) {\r\n            return this.cleanupCompleted(null, 0, null)\r\n                .catch(err => {\r\n                  // Now we're well and truly buggered\r\n                  this.initFailed = true;\r\n                  throw err;\r\n                });\r\n        }\r\n        entries = _.orderBy(entries, ['name'],['asc']);\r\n        let total = entries.length;\r\n        let calculated = 0;\r\n        let sizeTotal = 0;\r\n        try {\r\n            // Loop over entries\r\n            for (let entry of entries) {\r\n                const size = await this.getFileSize(entry);\r\n                // Calculate total size of log files\r\n                calculated++;\r\n                sizeTotal += size;\r\n                this.debug_metaLog('After ' + calculated + ' files, total size is ' + sizeTotal);\r\n                if (sizeTotal > this.config.totalLogSize) {\r\n                    this.debug_metaLog('Total log file size exceeds limit: ' + sizeTotal);\r\n                    return this.maxSizeExceeded(entries, size)\r\n                        .catch(err => {\r\n                          // Now we're well and truly buggered\r\n                          this.initFailed = true;\r\n                          throw err;\r\n                        });\r\n                } else if (calculated === total) {\r\n                    this.debug_metaLog('Total log file size is ok: ' + sizeTotal);\r\n                    // Below max size, so we're ready to go\r\n                    const lastEntry = entries.length > 0 ? entries[entries.length - 1] : null;\r\n                    return this.cleanupCompleted(lastEntry, size, null)\r\n                        .catch(err => {\r\n                          // Now we're well and truly buggered\r\n                          this.initFailed = true;\r\n                          throw err;\r\n                        });\r\n                }\r\n            }\r\n        } catch(failure) {\r\n            const lastEntry = entries.length > 0 ? entries[entries.length - 1] : null;\r\n            // Not much we can do except try to continue\r\n            return this.cleanupCompleted(lastEntry, 0, failure)\r\n                .catch(err => {\r\n                    // Now we're in real trouble\r\n                    this.initFailed = true;\r\n                    throw err;\r\n                });\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Wraps getMetadata in a Promise\r\n   * @param entry\r\n   * @returns a promise\r\n   */\r\n    private async getFileSize(entry: Entry): Promise<number> {\r\n      return new Promise((resolve: ((number) => void), reject) => {\r\n      entry.getMetadata(metadata => {\r\n          resolve(metadata.size);\r\n        }, failure => {\r\n          reject('SEVERE ERROR: could not retrieve metadata. ' + JSON.stringify(failure));\r\n        })\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Attempts to remove one file and recursively check total size again\r\n     * @param entries\r\n     * @param lastEntrySize\r\n     * @param resolve\r\n     * @param reject\r\n     */\r\n    private maxSizeExceeded(entries: Entry[], lastEntrySize: number): Promise<any> {\r\n        return this.removeFile(entries[0])\r\n            .then(() => {\r\n                this.debug_metaLog('Entry successfully removed');\r\n                // Remove oldest entry\r\n                entries.shift();\r\n                // Check again\r\n                return this.cleanupFiles(entries);\r\n            })\r\n            .catch(err => {\r\n                const lastEntry = entries.length > 0 ? entries[entries.length - 1] : null;\r\n                // Not much we can do except try to continue\r\n                return this.cleanupCompleted(lastEntry, lastEntrySize, 'SEVERE ERROR: could not clean up old files. ' + err);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * When file cleanup is completed, attempts to initialise config to point to current log file\r\n     * @param lastEntry The most recent existing log file\r\n     * @param lastEntrySize The size of the most recent existing log file\r\n     * @param error Any error to be logged after initialization\r\n     */\r\n    private cleanupCompleted(lastEntry: Entry, lastEntrySize: number, error: string): Promise<any> {\r\n        this.debug_metaLog('Log file cleanup done');\r\n        if (lastEntry && lastEntrySize < this.config.fileMaxSize) {\r\n            this.currentFile = lastEntry;\r\n            this.fileLoggerReady = true;\r\n            if (error) {\r\n                this.log(error);\r\n            }\r\n            this.debug_metaLog('File logger initialised at existing file: ' + this.currentFile.fullPath);\r\n            this.log('File logger initialised at existing file: ' + this.currentFile.name);\r\n            return Promise.resolve();\r\n        } else {\r\n            this.debug_metaLog('Last file nonexistent or too large. Creating new log file');\r\n            return this.createNextFile()\r\n                .then(() => {\r\n                    this.fileLoggerReady = true;\r\n                    if (error) {\r\n                        this.log(error);\r\n                    }\r\n                    this.debug_metaLog('File logger initialised at new file: ' + this.currentFile.fullPath);\r\n                    this.log('File logger initialised at new file: ' + this.currentFile.name);\r\n                    return Promise.resolve();\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempts to remove a file\r\n     * @param entry\r\n     */\r\n    private removeFile(entry: Entry): Promise<any> {\r\n        this.debug_metaLog('Removing file: ' + entry.fullPath);\r\n        const fullPath = entry.fullPath;\r\n        const path = fullPath.replace(entry.name, '');\r\n        return this.file.removeFile(this.config.baseDir + path, entry.name);\r\n    }\r\n\r\n    /**\r\n     * Puts the message on the queue for writing to file\r\n     * @param message\r\n     * @param err. If true, logging is at error level\r\n     */\r\n    private logInternal(message: string, err?: boolean): void {\r\n        const date = new Date();\r\n        const dateString = this.datePipe.transform(date, this.config.logDateFormat);\r\n        const logMessage = '[' + dateString + '] ' + message + '\\r\\n';\r\n        if (this.config.logToConsole) {\r\n            if (err) {\r\n              console.error(logMessage);\r\n            } else {\r\n              console.log(logMessage);\r\n            }\r\n        }\r\n        if (this.initFailed) {\r\n            this.debug_metaLog('File logger init has failed! Message discarded');\r\n            return;\r\n        } else {\r\n            // Put the message on the queue\r\n            this.queue.push(logMessage);\r\n            if (this.fileLoggerReady) {\r\n                if (this.queue.length > 0 && !this.processing) {\r\n                    this.processing = true;\r\n                    this.doProcess();\r\n                }\r\n            } else {\r\n                this.debug_metaLog('File logger is not ready! Message left on queue');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logs a message at info level\r\n     * @param message\r\n     */\r\n    log(message: string): void {\r\n      this.logInternal(message, false);\r\n    }\r\n\r\n    /**\r\n     * Developer-level logging\r\n     * @param message\r\n     */\r\n    logDev(message: string): void {\r\n        if (this.config.devMode) {\r\n            this.log('*DEBUG* ' + message);\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Error-level logging with optional error object\r\n   * @param message\r\n   * @param error\r\n   */\r\n    err(message: string, error?: any): void {\r\n        let logMessage = 'ERROR! ' + message;\r\n        if (error) {\r\n            logMessage += ': ' + JSON.stringify(error, Object.getOwnPropertyNames(error));\r\n        }\r\n        this.logInternal(logMessage, true);\r\n    }\r\n\r\n    /**\r\n     * Writes the current logging queue to file\r\n     */\r\n    private doProcess(): void {\r\n        this.debug_metaLog('Beginning processing loop');\r\n        this.processQueue()\r\n            .then(() => {\r\n                if (this.queue.length > 0) {\r\n                    this.doProcess();\r\n                } else {\r\n                    this.checkFileLength()\r\n                        .then(() => {\r\n                            this.processing = false;\r\n                        })\r\n                        .catch(err => {\r\n                            this.debug_metaLog('Error checking file length: ' + JSON.stringify(err));\r\n                            this.processing = false;\r\n                        });\r\n                }\r\n            })\r\n          .catch(err => {\r\n                this.debug_metaLog('Error processing queue: ' + err);\r\n                this.processing = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Writes the oldest entry in the queue to file, then checks if file rollover is required\r\n     */\r\n    private processQueue(): Promise<any> {\r\n        this.debug_metaLog('Processing queue of length ' + this.queue.length);\r\n        if (this.queue.length > 0) {\r\n            const message = this.queue.shift();\r\n            return this.file.writeFile(this.config.baseDir + '/' + this.config.logDir, this.currentFile.name, message, {\r\n                append: true,\r\n                replace: false\r\n            })\r\n                .then(() => {\r\n                    this.lines++;\r\n                    return this.checkFileLength();\r\n                })\r\n                .catch(err => {\r\n                    this.debug_metaLog('Error writing to file: ' + err);\r\n                });\r\n        } else {\r\n          return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the file length and creates a new file if required\r\n     */\r\n    private checkFileLength(): Promise<any> {\r\n        if (this.lines >= this.config.fileMaxLines) {\r\n            this.debug_metaLog('Creating new file as max number of log entries exceeded');\r\n            return this.createNextFile();\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a log file name from the current time\r\n     */\r\n    private createLogFileName(): string {\r\n        const date = new Date();\r\n        const dateString =this.datePipe.transform(date, this.config.fileDateFormat);\r\n        return this.config.logPrefix + '.' + dateString + '.log'\r\n    }\r\n\r\n    /**\r\n     * Creates the next log file and updates the local reference\r\n     */\r\n    private createNextFile(): Promise<any> {\r\n        const fileName = this.createLogFileName();\r\n        this.debug_metaLog('Attempting to create file at: ' + this.config.baseDir + this.config.logDir + '/' + fileName);\r\n        return this.file.createFile(this.config.baseDir + '/' + this.config.logDir, fileName, true)\r\n            .then(newFile => {\r\n                this.lines = 0;\r\n                this.currentFile = newFile;\r\n                this.debug_metaLog('Created new file: ' + this.currentFile.fullPath);\r\n            })\r\n            .catch(err => {\r\n                this.debug_metaLog('Failed to create new file: ' + JSON.stringify(err));\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current list of log files in the logging directory\r\n     */\r\n    getLogFiles(): Promise<Entry[]> {\r\n        this.debug_metaLog('Attempting to retrieve log files');\r\n        if (this.initFailed) {\r\n            this.debug_metaLog('Log never initialised so can\\'t retrieve files');\r\n            return Promise.resolve([]);\r\n        } else {\r\n            return this.file.listDir(this.config.baseDir, this.config.logDir);\r\n        }\r\n    }\r\n\r\n    private debug_metaLog(message: string): void {\r\n        if (this.config.enableMetaLogging) {\r\n            console.log('**LOGGER_META**: ' + message);\r\n        }\r\n    }\r\n}\r\n\r\nclass LogProviderConfig implements ILogProviderConfig {\r\n    // If true, logs verbose details of file logging operations to console\r\n    enableMetaLogging: boolean;\r\n\r\n    // If true, all file log messages also appear in the console\r\n    logToConsole: boolean;\r\n\r\n    // Date format used in log statements\r\n    logDateFormat: string;\r\n\r\n    // Date format used in log file names.\r\n    // NOTE: be careful with special characters like ':' as this can cause file system issues\r\n    fileDateFormat: string;\r\n\r\n    // Maximum number of log statements before file rollover\r\n    fileMaxLines: number;\r\n\r\n    // If the last log file exceeds this size on initialization, a new log file will be created\r\n    fileMaxSize: number;\r\n\r\n    // If the total size of all log files exceeds this size on initialisation, oldest files will be removed\r\n    totalLogSize: number;\r\n\r\n    // Name of directory to create for logs, within the baseDir\r\n    logDir: string;\r\n\r\n    // Name of directory in which to create log directory\r\n    baseDir: string;\r\n\r\n    // Prefix for log files\r\n    logPrefix: string;\r\n\r\n    // Developer-level logging will appear in log files if true\r\n    devMode: boolean;\r\n\r\n    constructor(fields: any) {\r\n        // Quick and dirty extend/assign fields to this model\r\n        for (const f in fields) {\r\n            // @ts-ignore\r\n            this[f] = fields[f];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Overrides this object's uninitialized fields with the passed parameter's fields\r\n     * @param config\r\n     */\r\n    merge(config: any) {\r\n      for (let k in config) {\r\n        if (!(k in this)) {\r\n          this[k] = config[k];\r\n        }\r\n      }\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {LogProvider} from './log.service';\r\n\r\nexport * from './log.service';\r\nexport * from './config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [LogProvider]\r\n})\r\nexport class LogFileAppenderModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n     return {\r\n       ngModule: LogFileAppenderModule,\r\n       providers: [LogProvider]\r\n     };\r\n  }\r\n\r\n  public static forChild(): ModuleWithProviders {\r\n    return {\r\n      ngModule: LogFileAppenderModule,\r\n      providers: [LogProvider]\r\n    }\r\n  }\r\n}\r\n"]}