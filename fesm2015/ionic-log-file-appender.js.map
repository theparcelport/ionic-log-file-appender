{"version":3,"file":"ionic-log-file-appender.js","sources":["ng://ionic-log-file-appender/log.service.ts","ng://ionic-log-file-appender/log-file-appender.module.ts"],"sourcesContent":["import {DatePipe} from '@angular/common';\r\nimport {Entry, File} from '@ionic-native/file';\r\nimport {Injectable} from '@angular/core';\r\nimport {Platform} from 'ionic-angular';\r\nimport * as _ from 'lodash'\r\nimport {ILogProviderConfig} from './config';\r\n\r\n/**\r\n * SmartMove Ionic rolling log file appender\r\n * CellTrack Systems Pty Ltd 2018\r\n */\r\n@Injectable()\r\nexport class LogProvider {\r\n\r\n    private fileLoggerReady = false;\r\n    private initFailed = false;\r\n    private currentFile: Entry;\r\n    private lines: 0;\r\n    private queue: string[] = [];\r\n    private processing = false;\r\n\r\n    private readonly defaultConfig: LogProviderConfig;\r\n\r\n    private config: LogProviderConfig;\r\n\r\n    constructor(private file: File,\r\n                private platform: Platform,\r\n                private datePipe: DatePipe) {\r\n        this.defaultConfig = new LogProviderConfig({\r\n            enableMetaLogging: false,\r\n            logToConsole: false,\r\n            logDateFormat: 'yyyy-MM-dd HH:mm:ss.SSS',\r\n            fileDateFormat: 'yyyy-MM-dd_HH-mm-ss-SSS',\r\n            fileMaxLines: 2000,\r\n            fileMaxSize: 1000000,\r\n            totalLogSize: 5000000,\r\n            baseDir: null,\r\n            logDir: 'logs',\r\n            logPrefix: 'log',\r\n            devMode: false\r\n        });\r\n        this.config = this.defaultConfig;\r\n    }\r\n\r\n    /**\r\n     * Initializes the file logger\r\n     */\r\n    init(configuration: ILogProviderConfig): Promise<any> {\r\n        return this.platform.ready()\r\n            .then(() => {\r\n                this.config = new LogProviderConfig(configuration);\r\n                // Any configuration not specified will take the defaults\r\n                this.config.merge(this.defaultConfig);\r\n                if (!this.config.baseDir) {\r\n                    // Can only initialise this after platform is ready\r\n                    this.config.baseDir = this.file.dataDirectory;\r\n                }\r\n                this.debug_metaLog('LogProvider initialised with configuration: ' + JSON.stringify(this.config));\r\n                this.fileLoggerReady = false;\r\n                this.debug_metaLog('Initialising file logger');\r\n                this.log('Initialising file logger');\r\n                if (!this.platform.is('cordova'))\r\n                {\r\n                    this.debug_metaLog('Not initialising file logger as the it is not supported by the platform ' + this.platform.url());\r\n                    this.initFailed = true;\r\n                    return Promise.resolve();\r\n                }\r\n                this.debug_metaLog('Data directory: ' + this.config.baseDir);\r\n                return this.file.checkDir(this.config.baseDir, this.config.logDir)\r\n                    .then(() => {\r\n                        this.debug_metaLog('Found logging directory');\r\n                        return this.initLogFile();\r\n                    })\r\n                    .catch(err => {\r\n                        this.debug_metaLog('Could not find logging directory: ' + JSON.stringify(err));\r\n                        return this.createLogDir();\r\n                    });\r\n        });\r\n    }\r\n\r\n    isReady(): boolean {\r\n      return this.fileLoggerReady;\r\n    }\r\n\r\n    /**\r\n     * Attempts to create the logging directory\r\n     */\r\n    private createLogDir(): Promise<any> {\r\n        this.debug_metaLog('Attempting to create logging directory');\r\n        return this.file.createDir(this.config.baseDir, this.config.logDir, false)\r\n            .then(() => {\r\n                this.debug_metaLog('Successfully created logging directory');\r\n                return this.initLogFile();\r\n            })\r\n            .catch(err => {\r\n                this.initFailed = true;\r\n                this.debug_metaLog('Failed to create logging directory: ' + JSON.stringify(err));\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Attempts to initialise the current log file\r\n     * @returns a promise upon completion or failure\r\n     */\r\n    private initLogFile(): Promise<any> {\r\n        this.debug_metaLog('Attempting to initialise log file');\r\n        return this.file.listDir(this.config.baseDir, this.config.logDir)\r\n            .then((entries: Entry[]) => {\r\n                if (entries && entries.length > 0) {\r\n                    this.debug_metaLog(entries.length + ' existing log files found.');\r\n                    return this.cleanupFiles(entries);\r\n                } else {\r\n                    this.debug_metaLog('No existing log files found.');\r\n                    return this.cleanupCompleted(null, 0, null);\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.debug_metaLog('Failed to get file list: ' + JSON.stringify(err, Object.getOwnPropertyNames(err)));\r\n                throw err;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks the total size of log files against the configured maximum size and deletes oldest if necessary\r\n     * @param entries the files found in the logging directory\r\n     */\r\n    private async cleanupFiles(entries: Entry[]): Promise<any> {\r\n        this.debug_metaLog('Starting cleanup of ' + entries.length + ' log files');\r\n        entries = _.filter(entries, (entry: Entry) => entry.isFile && entry.name && entry.name.startsWith(this.config.logPrefix));\r\n        if (entries.length === 0) {\r\n            return this.cleanupCompleted(null, 0, null)\r\n                .catch(err => {\r\n                  // Now we're well and truly buggered\r\n                  this.initFailed = true;\r\n                  throw err;\r\n                });\r\n        }\r\n        entries = _.orderBy(entries, ['name'],['asc']);\r\n        let total = entries.length;\r\n        let calculated = 0;\r\n        let sizeTotal = 0;\r\n        try {\r\n            // Loop over entries\r\n            for (let entry of entries) {\r\n                const size = await this.getFileSize(entry);\r\n                // Calculate total size of log files\r\n                calculated++;\r\n                sizeTotal += size;\r\n                this.debug_metaLog('After ' + calculated + ' files, total size is ' + sizeTotal);\r\n                if (sizeTotal > this.config.totalLogSize) {\r\n                    this.debug_metaLog('Total log file size exceeds limit: ' + sizeTotal);\r\n                    return this.maxSizeExceeded(entries, size)\r\n                        .catch(err => {\r\n                          // Now we're well and truly buggered\r\n                          this.initFailed = true;\r\n                          throw err;\r\n                        });\r\n                } else if (calculated === total) {\r\n                    this.debug_metaLog('Total log file size is ok: ' + sizeTotal);\r\n                    // Below max size, so we're ready to go\r\n                    const lastEntry = entries.length > 0 ? entries[entries.length - 1] : null;\r\n                    return this.cleanupCompleted(lastEntry, size, null)\r\n                        .catch(err => {\r\n                          // Now we're well and truly buggered\r\n                          this.initFailed = true;\r\n                          throw err;\r\n                        });\r\n                }\r\n            }\r\n        } catch(failure) {\r\n            const lastEntry = entries.length > 0 ? entries[entries.length - 1] : null;\r\n            // Not much we can do except try to continue\r\n            return this.cleanupCompleted(lastEntry, 0, failure)\r\n                .catch(err => {\r\n                    // Now we're in real trouble\r\n                    this.initFailed = true;\r\n                    throw err;\r\n                });\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Wraps getMetadata in a Promise\r\n   * @param entry\r\n   * @returns a promise\r\n   */\r\n    private async getFileSize(entry: Entry): Promise<number> {\r\n      return new Promise((resolve: ((number) => void), reject) => {\r\n      entry.getMetadata(metadata => {\r\n          resolve(metadata.size);\r\n        }, failure => {\r\n          reject('SEVERE ERROR: could not retrieve metadata. ' + JSON.stringify(failure));\r\n        })\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Attempts to remove one file and recursively check total size again\r\n     * @param entries\r\n     * @param lastEntrySize\r\n     * @param resolve\r\n     * @param reject\r\n     */\r\n    private maxSizeExceeded(entries: Entry[], lastEntrySize: number): Promise<any> {\r\n        return this.removeFile(entries[0])\r\n            .then(() => {\r\n                this.debug_metaLog('Entry successfully removed');\r\n                // Remove oldest entry\r\n                entries.shift();\r\n                // Check again\r\n                return this.cleanupFiles(entries);\r\n            })\r\n            .catch(err => {\r\n                const lastEntry = entries.length > 0 ? entries[entries.length - 1] : null;\r\n                // Not much we can do except try to continue\r\n                return this.cleanupCompleted(lastEntry, lastEntrySize, 'SEVERE ERROR: could not clean up old files. ' + err);\r\n            })\r\n    }\r\n\r\n    /**\r\n     * When file cleanup is completed, attempts to initialise config to point to current log file\r\n     * @param lastEntry The most recent existing log file\r\n     * @param lastEntrySize The size of the most recent existing log file\r\n     * @param error Any error to be logged after initialization\r\n     */\r\n    private cleanupCompleted(lastEntry: Entry, lastEntrySize: number, error: string): Promise<any> {\r\n        this.debug_metaLog('Log file cleanup done');\r\n        if (lastEntry && lastEntrySize < this.config.fileMaxSize) {\r\n            this.currentFile = lastEntry;\r\n            this.fileLoggerReady = true;\r\n            if (error) {\r\n                this.log(error);\r\n            }\r\n            this.debug_metaLog('File logger initialised at existing file: ' + this.currentFile.fullPath);\r\n            this.log('File logger initialised at existing file: ' + this.currentFile.name);\r\n            return Promise.resolve();\r\n        } else {\r\n            this.debug_metaLog('Last file nonexistent or too large. Creating new log file');\r\n            return this.createNextFile()\r\n                .then(() => {\r\n                    this.fileLoggerReady = true;\r\n                    if (error) {\r\n                        this.log(error);\r\n                    }\r\n                    this.debug_metaLog('File logger initialised at new file: ' + this.currentFile.fullPath);\r\n                    this.log('File logger initialised at new file: ' + this.currentFile.name);\r\n                    return Promise.resolve();\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempts to remove a file\r\n     * @param entry\r\n     */\r\n    private removeFile(entry: Entry): Promise<any> {\r\n        this.debug_metaLog('Removing file: ' + entry.fullPath);\r\n        const fullPath = entry.fullPath;\r\n        const path = fullPath.replace(entry.name, '');\r\n        return this.file.removeFile(this.config.baseDir + path, entry.name);\r\n    }\r\n\r\n    /**\r\n     * Puts the message on the queue for writing to file\r\n     * @param message\r\n     * @param err. If true, logging is at error level\r\n     */\r\n    private logInternal(message: string, err?: boolean): void {\r\n        const date = new Date();\r\n        const dateString = this.datePipe.transform(date, this.config.logDateFormat);\r\n        const logMessage = '[' + dateString + '] ' + message + '\\r\\n';\r\n        if (this.config.logToConsole) {\r\n            if (err) {\r\n              console.error(logMessage);\r\n            } else {\r\n              console.log(logMessage);\r\n            }\r\n        }\r\n        if (this.initFailed) {\r\n            this.debug_metaLog('File logger init has failed! Message discarded');\r\n            return;\r\n        } else {\r\n            // Put the message on the queue\r\n            this.queue.push(logMessage);\r\n            if (this.fileLoggerReady) {\r\n                if (this.queue.length > 0 && !this.processing) {\r\n                    this.processing = true;\r\n                    this.doProcess();\r\n                }\r\n            } else {\r\n                this.debug_metaLog('File logger is not ready! Message left on queue');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Logs a message at info level\r\n     * @param message\r\n     */\r\n    log(message: string): void {\r\n      this.logInternal(message, false);\r\n    }\r\n\r\n    /**\r\n     * Developer-level logging\r\n     * @param message\r\n     */\r\n    logDev(message: string): void {\r\n        if (this.config.devMode) {\r\n            this.log('*DEBUG* ' + message);\r\n        }\r\n    }\r\n\r\n  /**\r\n   * Error-level logging with optional error object\r\n   * @param message\r\n   * @param error\r\n   */\r\n    err(message: string, error?: any): void {\r\n        let logMessage = 'ERROR! ' + message;\r\n        if (error) {\r\n            logMessage += ': ' + JSON.stringify(error, Object.getOwnPropertyNames(error));\r\n        }\r\n        this.logInternal(logMessage, true);\r\n    }\r\n\r\n    /**\r\n     * Writes the current logging queue to file\r\n     */\r\n    private doProcess(): void {\r\n        this.debug_metaLog('Beginning processing loop');\r\n        this.processQueue()\r\n            .then(() => {\r\n                if (this.queue.length > 0) {\r\n                    this.doProcess();\r\n                } else {\r\n                    this.checkFileLength()\r\n                        .then(() => {\r\n                            this.processing = false;\r\n                        })\r\n                        .catch(err => {\r\n                            this.debug_metaLog('Error checking file length: ' + JSON.stringify(err));\r\n                            this.processing = false;\r\n                        });\r\n                }\r\n            })\r\n          .catch(err => {\r\n                this.debug_metaLog('Error processing queue: ' + err);\r\n                this.processing = false;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Writes the oldest entry in the queue to file, then checks if file rollover is required\r\n     */\r\n    private processQueue(): Promise<any> {\r\n        this.debug_metaLog('Processing queue of length ' + this.queue.length);\r\n        if (this.queue.length > 0) {\r\n            const message = this.queue.shift();\r\n            return this.file.writeFile(this.config.baseDir + '/' + this.config.logDir, this.currentFile.name, message, {\r\n                append: true,\r\n                replace: false\r\n            })\r\n                .then(() => {\r\n                    this.lines++;\r\n                    return this.checkFileLength();\r\n                })\r\n                .catch(err => {\r\n                    this.debug_metaLog('Error writing to file: ' + err);\r\n                });\r\n        } else {\r\n          return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks the file length and creates a new file if required\r\n     */\r\n    private checkFileLength(): Promise<any> {\r\n        if (this.lines >= this.config.fileMaxLines) {\r\n            this.debug_metaLog('Creating new file as max number of log entries exceeded');\r\n            return this.createNextFile();\r\n        } else {\r\n            return Promise.resolve();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a log file name from the current time\r\n     */\r\n    private createLogFileName(): string {\r\n        const date = new Date();\r\n        const dateString =this.datePipe.transform(date, this.config.fileDateFormat);\r\n        return this.config.logPrefix + '.' + dateString + '.log'\r\n    }\r\n\r\n    /**\r\n     * Creates the next log file and updates the local reference\r\n     */\r\n    private createNextFile(): Promise<any> {\r\n        const fileName = this.createLogFileName();\r\n        this.debug_metaLog('Attempting to create file at: ' + this.config.baseDir + this.config.logDir + '/' + fileName);\r\n        return this.file.createFile(this.config.baseDir + '/' + this.config.logDir, fileName, true)\r\n            .then(newFile => {\r\n                this.lines = 0;\r\n                this.currentFile = newFile;\r\n                this.debug_metaLog('Created new file: ' + this.currentFile.fullPath);\r\n            })\r\n            .catch(err => {\r\n                this.debug_metaLog('Failed to create new file: ' + JSON.stringify(err));\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Retrieves the current list of log files in the logging directory\r\n     */\r\n    getLogFiles(): Promise<Entry[]> {\r\n        this.debug_metaLog('Attempting to retrieve log files');\r\n        if (this.initFailed) {\r\n            this.debug_metaLog('Log never initialised so can\\'t retrieve files');\r\n            return Promise.resolve([]);\r\n        } else {\r\n            return this.file.listDir(this.config.baseDir, this.config.logDir);\r\n        }\r\n    }\r\n\r\n    private debug_metaLog(message: string): void {\r\n        if (this.config.enableMetaLogging) {\r\n            console.log('**LOGGER_META**: ' + message);\r\n        }\r\n    }\r\n}\r\n\r\nclass LogProviderConfig implements ILogProviderConfig {\r\n    // If true, logs verbose details of file logging operations to console\r\n    enableMetaLogging: boolean;\r\n\r\n    // If true, all file log messages also appear in the console\r\n    logToConsole: boolean;\r\n\r\n    // Date format used in log statements\r\n    logDateFormat: string;\r\n\r\n    // Date format used in log file names.\r\n    // NOTE: be careful with special characters like ':' as this can cause file system issues\r\n    fileDateFormat: string;\r\n\r\n    // Maximum number of log statements before file rollover\r\n    fileMaxLines: number;\r\n\r\n    // If the last log file exceeds this size on initialization, a new log file will be created\r\n    fileMaxSize: number;\r\n\r\n    // If the total size of all log files exceeds this size on initialisation, oldest files will be removed\r\n    totalLogSize: number;\r\n\r\n    // Name of directory to create for logs, within the baseDir\r\n    logDir: string;\r\n\r\n    // Name of directory in which to create log directory\r\n    baseDir: string;\r\n\r\n    // Prefix for log files\r\n    logPrefix: string;\r\n\r\n    // Developer-level logging will appear in log files if true\r\n    devMode: boolean;\r\n\r\n    constructor(fields: any) {\r\n        // Quick and dirty extend/assign fields to this model\r\n        for (const f in fields) {\r\n            // @ts-ignore\r\n            this[f] = fields[f];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Overrides this object's uninitialized fields with the passed parameter's fields\r\n     * @param config\r\n     */\r\n    merge(config: any) {\r\n      for (let k in config) {\r\n        if (!(k in this)) {\r\n          this[k] = config[k];\r\n        }\r\n      }\r\n    }\r\n}\r\n","import {CommonModule} from '@angular/common';\r\nimport {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {LogProvider} from './log.service';\r\n\r\nexport * from './log.service';\r\nexport * from './config';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  providers: [LogProvider]\r\n})\r\nexport class LogFileAppenderModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n     return {\r\n       ngModule: LogFileAppenderModule,\r\n       providers: [LogProvider]\r\n     };\r\n  }\r\n\r\n  public static forChild(): ModuleWithProviders {\r\n    return {\r\n      ngModule: LogFileAppenderModule,\r\n      providers: [LogProvider]\r\n    }\r\n  }\r\n}\r\n"],"names":["_.filter","_.orderBy"],"mappings":"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"}